#!/usr/bin/env ruby

require 'date'

class Array
    def sum
        inject(nil) { |sum, x| sum ? sum+x : x }
    end

    def mean
        length == 0 ? 0 : inject(:+) / length 
    end

    def median
        len = length
        sorted = sort
        len % 2 == 1 ? sorted[len/2] : (sorted[len/2 -1] + sorted[len/2]) / 2
    end
end

class Fixnum
    def as_hours
        hours = (self / MIN_P_HR).to_i
        rem = self % MIN_P_HR
        return sprintf('%d:%02d', hours, rem)
    end
end

class Err
    BAD_12_HR = 2
    BAD_FLAG = 4
    DELIM_OOO = 8
    END_ON_CLOCK_IN = 16
    START_GT_STOP = 32
end

def accumulate(start, stop)
    if start > stop
        err_warn(Err::START_GT_STOP, "start after stop at line #{$.}")
    end
    $work_p.push(((stop - start) * MIN_P_HR * HR_P_DAY ).to_i)
end

def err_warn(flag, message)
    $errs = $errs | flag
    warn message
end

def parsetime(timestr)
    a = timestr.split($tdelim)
    
    t = Hash.new
    t["y"] = a[0].to_i
    t["m"] = a[1].to_i
    t["d"] = a[2].to_i
    t["h"] = a[3].to_i
    t["M"] = a[4].to_i

    if a.length == 6                               # AM or PM
        if a[5] !~ /^([Pp]|[Aa])[Mm]$/ 
            err_warn(Err::BAD_12_HR, "Bad 12 hour format at #{$.}")
        end

        t["h"] = 0              if t["h"] == 12
        t["h"] = t["h"] + 12    if a[5]   == "PM"
    end

    return DateTime.new(t["y"], t["m"], t["d"], t["h"], t["M"] ) 
end

def summarize()
    if $verbose
        puts "as hours: #{$work_p.inject(:+).as_hours}"
        puts "as minutes: #{$work_p.inject(:+)}"
        puts "periods: #{$work_p.length}"
        puts "mean: #{$work_p.mean}"
        puts "median: #{$work_p.median}"
        puts "shortest: #{$work_p.min}"
        puts "longest: #{$work_p.max}"
    else
        puts $work_p.inject(:+)
    end

    if $very_verbose
        $work_p.each_with_index do |minutes, i|
            puts "p#{i+1}: #{minutes}"
        end
    end
end

def usage(message)
    warn "#{$0} USAGE: #{File.basename($0)} [OPTIONS] [FILE]"
    warn message
    exit 
end

MIN_P_HR = 60
HR_P_DAY = 24
CONFIG = ENV['HOME'] + "/.config/logtime/"

$tdelim = /[ :-]+/
$record_sep = /^[-\s]*$/
$speak = true
$errs = 0

loop { case ARGV[0]
    when '--status' then ARGV.shift; $speak        = false
    when '-i'       then ARGV.shift; $file         = ARGV.shift
    when '-v'       then ARGV.shift; $verbose      = true
    when '-vv'      then ARGV.shift; $very_verbose = true
    when '-r'       then ARGV.shift; $record_sep   = ARGV.shift
    when '--'       then ARGV.shift; break
    when /^-/ 
        err_warn(Err::BAD_FLAG, "Unknown option: #{ARGV[0].inspect}")
    else break
end; }

$clock = "out"
$work_p = Array.new
time = Hash.new

#FIXME allow stdin
$file = CONFIG + ARGV.shift unless defined? $file

File.open($file).each do |line|
    next if line =~ /^\s*#/
    line = line.chomp
    if line =~ $record_sep
        if $clock == "in"
            err_warn(Err::DELIM_OOO, "Delimiter before end time at line #{$.}")
        end
        $clock = "out"
    else
        line.sub!(/#.*$/, "")
        $clock = $clock == "in" ? "out" : "in"
        time[$clock] = parsetime(line)

        if $clock == "out"
            accumulate(time["in"], time["out"])
        end
    end
end

if $speak
    if $clock == "in"
        err_warn(Err::END_ON_CLOCK_IN, "ended on clock in at line #{$.}")
    end
    summarize()
else
    puts $clock
end

exit $errs
