#!/bin/ruby

require 'date'
class Array
    def sum
        inject(nil) { |sum, x| sum ? sum+x : x }
    end

    def mean
        length == 0 ? 0 : inject(:+) / length 
    end

    def median
        len = length
        sorted = sort
        len % 2 == 1 ? sorted[len/2] : (sorted[len/2 -1] + sorted[len/2]) / 2
    end
end


def accumulate(start, stop)
    $work_p.push(((stop - start) * MIN_P_HR * HR_P_DAY ).to_i)
end

def parsetime(timestr)
    a = timestr.split($tdelim)
    
    t = Hash.new
    t["y"] = a[0].to_i
    t["m"] = a[1].to_i
    t["d"] = a[2].to_i
    t["h"] = a[3].to_i
    if t["h"] == 12
        t["h"] = 0
    end
    if a[5] == "PM"
        t["h"] = t["h"] + 12
    end
    t["M"] = a[4].to_i

    return DateTime.new(t["y"], t["m"], t["d"], t["h"], t["M"] ) 
end

def summarize()
    if $verbose
        puts "minutes: #{$work_p.inject(:+)}"
        puts "periods: #{$work_p.length}"
        puts "mean: #{$work_p.mean}"
        puts "median: #{$work_p.median}"
        puts "shortest: #{$work_p.min}"
        puts "longest: #{$work_p.max}"
    else
        puts $work_p.inject(:+)
    end

    if $very_verbose
        puts $work_p
    end
#print summary (total, number of periods, avg & mean lengths, 
#time from beg to end, % of that time working, 
#avg & mean breaks, number of breaks
    
end

MIN_P_HR = 60
HR_P_DAY = 24
$tdelim = /[ :-]+/
$record_sep = /^\s*$/

loop { case ARGV[0]
    when '-v' then ARGV.shift; $verbose = true
    when '-vv' then ARGV.shift; $very_verbose = true
    when '-d' then ARGV.shift; $record_sep = ARGV.shift
    when /--/ then ARGV.shift; break
    when /^-/ then usage("Unknown option: #{ARGV[0].inspect}")
    else break
end; }

$clock = "out"
$work_p = Array.new
time = Hash.new

while gets() do
    line = $_.chomp
    if line =~ $record_sep
        if $clock == "in"
            warn "Poorly formed input: delimiter before end time at line #{$.}"
        end
        $clock = "out"
    else
        $clock = $clock == "in" ? "out" : "in"
        time[$clock] = parsetime(line)

        if $clock == "out"
            accumulate(time["in"], time["out"])
        end
    end
    
end

if $clock == "in"
    warn "ended on $clock in at line #{NR}"
end

summarize()

exit
